name: Build and Push Images

on:
  push:
    branches: [ '**' ]
    tags: [ '**' ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch: {}

jobs:
  build:
    name: Build and push to GHCR (${{ matrix.name }}, ${{ matrix.context }}, ${{ matrix.dockerfile }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    concurrency:
      group: build-images-${{ github.ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: firewall-agent
            context: .
            dockerfile: firewall-agent/Dockerfile
          - name: firewall-agent-ui
            context: .
            dockerfile: firewall-agent-ui/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Prefer a PAT for GHCR to avoid 403 on HEAD when packages pre-exist
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT || github.token }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          pull: true
          # Avoid failing on forks/PRs without package write perms
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
